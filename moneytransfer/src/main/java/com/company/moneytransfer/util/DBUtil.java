package com.company.moneytransfer.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;

public class DBUtil {

	private static final Logger LOGGER = LoggerFactory.getLogger(DBUtil.class);
	
	public static void setUpInitialData(Vertx vertx) throws Exception {
		
		LOGGER.info("Start setup initial database.");
	    final JDBCClient client = JDBCClient.createShared(vertx, new JsonObject()
	            .put("url", "jdbc:hsqldb:mem:test?shutdown=true")
	            .put("driver_class", "org.hsqldb.jdbcDriver")
	            .put("max_pool_size", 30)
	            .put("user", "SA")
	            .put("password", ""));
		
	    
	    client.getConnection(conn -> {
	    	
	        if (conn.failed()) {
	        	LOGGER.error(conn.cause().getMessage());
	        	return;
	        }
	        
	        final SQLConnection connection = conn.result();
	        
	        connection.setAutoCommit(false, res -> {
	        	
		        connection.execute("DROP SCHEMA PUBLIC CASCADE; drop table if exists user; CREATE TABLE user(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, name varchar(255))", create -> {
		            if (create.failed()) {
		            	LOGGER.error("Cannot create the table user");
		            	create.cause().printStackTrace();
		            }
		            else {
		            	LOGGER.info("Created user table!");
		            	
				        connection.execute("drop table if exists account; CREATE TABLE account(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, userId integer NOT NULL, balance DECIMAL(10,2) NOT NULL )", createAccount -> {
				            if (createAccount.failed()) {
				            	LOGGER.error("Cannot create the table account");
				            	createAccount.cause().printStackTrace();
				            }
				            else {
				            	LOGGER.info("Created account table!");
				            	
						        connection.execute("drop table if exists money_transfer; CREATE TABLE money_transfer(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, fromAccountId integer NOT NULL, toAccountId integer NOT NULL, amount DECIMAL(10,2) NOT NULL, currency varchar(50) NOT NULL, transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)", createMoneyTransfer -> {
						            if (createMoneyTransfer.failed()) {
						            	LOGGER.error("Cannot create the table money_transfer");
						            	createMoneyTransfer.cause().printStackTrace();
						            }
						            else {
						            	LOGGER.info("Created money_transfer table!");
						            	
								        connection.execute("ALTER TABLE account ADD FOREIGN KEY(userId) REFERENCES user(id);", alter -> {
								            if (alter.failed()) {
								            	LOGGER.error("Cannot alter the table account");
								            	alter.cause().printStackTrace();
								            }
								            else {
								            	LOGGER.info("Altered account table!");
								            	
										        connection.execute("ALTER TABLE money_transfer ADD FOREIGN KEY(fromAccountId) REFERENCES account(id);", alterMoneyTransfer -> {
										            if (alterMoneyTransfer.failed()) {
										            	LOGGER.error("Cannot alter the table money_transfer");
										            	alterMoneyTransfer.cause().printStackTrace();
										            }
										            else {
										            	LOGGER.info("Altered money_transfer table!");
												        connection.execute("ALTER TABLE money_transfer ADD FOREIGN KEY(toAccountId) REFERENCES account(id);", alterMoneyTransfer2 -> {
												            if (alterMoneyTransfer2.failed()) {
												            	LOGGER.error("Cannot alter the table money_transfer");
												            	alterMoneyTransfer2.cause().printStackTrace();
												            }
												            else {
												            	LOGGER.info("Altered money_transfer table!");
														        // Insert statements for test data
														        connection.execute("insert into user(name) values ( 'user1')", insert1 -> {
														            if (insert1.failed()) {
														            	LOGGER.error("Cannot insert to the table user");
														            	insert1.cause().printStackTrace();
														            }
														            else {
														            	LOGGER.info("Inserted sample row into the user table!");
														            	
																        connection.execute("insert into user(name) values ('user2')", create2 -> {
																            if (create2.failed()) {
																            	LOGGER.error("Cannot insert to the table user");
																            	create2.cause().printStackTrace();
																            }
																            else {
																            	LOGGER.info("Inserted sample row into the user table!");
																		        connection.execute("insert into account(userId,balance) values (1,100)", create3 -> {
																		            if (create3.failed()) {
																		            	LOGGER.error("Cannot insert to the table account");
																		            	create3.cause().printStackTrace();
																		            }
																		            else {
																		            	LOGGER.info("Inserted sample row into the account table!");
																				        connection.execute("insert into account(userId,balance) values (2,200)", create4 -> {
																				            if (create4.failed()) {
																				            	LOGGER.error("Cannot insert to the table account");
																				            	create4.cause().printStackTrace();
																				            }
																				            else {
																				            	LOGGER.info("Inserted sample row into the account table!");
																								connection.commit( resCommit -> {
																									
																							        if ( resCommit.failed() ) {
																							        	LOGGER.info("Could not create sample database schema!");
																							        	connection.rollback( resRollback -> {
																							                if (resRollback.failed()) {
																							                  throw new RuntimeException(resRollback.cause());
																							                }
																							            });
																							        }
																							        else {
																							        	LOGGER.info("Created sample database schema!");
																							        	LOGGER.info("Sample DB rows populated for user and account tables!");
																							        }
																							        
																						            // and close the connection
																						            connection.close(done -> {
																						              if (done.failed()) {
																						                throw new RuntimeException(done.cause());
																						              }
																						            });
																							    });
																				            }
																				        });
																		            }
																		        });
																            }
																        });
														            }
														        });
												            }
												        });
										            }
										        });
								            }
								        });
						            }
						        });
				            }
				        });
		            }
		        });
	        });
	    });
	}

}